!function(n){var t={};function a(r){if(t[r])return t[r].exports;var e=t[r]={i:r,l:!1,exports:{}};return n[r].call(e.exports,e,e.exports,a),e.l=!0,e.exports}a.m=n,a.c=t,a.d=function(r,e,n){a.o(r,e)||Object.defineProperty(r,e,{enumerable:!0,get:n})},a.r=function(r){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},a.t=function(e,r){if(1&r&&(e=a(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var t in e)a.d(n,t,function(r){return e[r]}.bind(null,t));return n},a.n=function(r){var e=r&&r.__esModule?function(){return r.default}:function(){return r};return a.d(e,"a",e),e},a.o=function(r,e){return Object.prototype.hasOwnProperty.call(r,e)},a.p="",a(a.s="./src/js/Game1-1.js")}({"./src/css/Game.css":
/*!**************************!*\
  !*** ./src/css/Game.css ***!
  \**************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./src/css/Game.css?")},"./src/js/Game1-1.js":
/*!***************************!*\
  !*** ./src/js/Game1-1.js ***!
  \***************************/
/*! no exports provided */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _css_Game_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../css/Game.css */ "./src/css/Game.css");\n/* harmony import */ var _css_Game_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_Game_css__WEBPACK_IMPORTED_MODULE_0__);\n\r\n\r\nvar table;//游戏桌面\r\nvar squareWidth = 10;//每个方块的宽度\r\nvar boardWidth = 10;//有多少行和列的方块\r\nvar squareSet = [];//当前桌面上的方块集合（二维数组，最左下角是0，0位置）\r\nvar timer = null;//闪烁定时器\r\nvar choose = [];//被选中的方块\r\nvar flag = true;//对点击事件加锁，消除过程中不允许有其他移入和点击操作\r\nvar tempSquare = null;//消除过程中如果输入移入其他方块，进行记录\r\nvar baseScore = 5;//基础分数\r\nvar stepScore = 10;//一次每多消除一个额外增加的分数\r\nvar totalScore = 0;//当前总分数\r\nvar targetScore = 1800;//目标分数\r\nvar level = 3; //难度\r\nvar RAF = null;\r\n\r\nfunction isFinish() {//判断游戏是否结束\r\n    var flag = true;\r\n    for (var i = 0; i < squareSet.length; i++) {\r\n        for (var j = 0; j < squareSet[i].length; j++) {\r\n            var temp = [];\r\n            checkLinked(squareSet[i][j], temp);\r\n            if (temp.length > 1) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return flag;\r\n}\r\n\r\nfunction move() {//方块纵向下落与横向合并\r\n    for (var i = 0; i < boardWidth; i++) {//纵向移动\r\n        var pointer = 0;\r\n        for (var j = 0; j < boardWidth; j++) {\r\n            if (squareSet[j][i] != null) {\r\n                if (j != pointer) {\r\n                    squareSet[pointer][i] = squareSet[j][i];\r\n                    squareSet[j][i].row = pointer;\r\n                    squareSet[j][i] = null;\r\n                }\r\n                pointer++;\r\n            }\r\n        }\r\n    }\r\n    for (var i = 0; i < squareSet[0].length;) {//横向移动\r\n        if (squareSet[0][i] == null) {\r\n            for (var j = 0; j < boardWidth; j++) {\r\n                squareSet[j].splice(i, 1);\r\n            }\r\n            continue;\r\n        }\r\n        i++;\r\n    }\r\n    refresh();\r\n}\r\n\r\nfunction goBack() {//将所有的小方块的样式还原\r\n    if (timer != null) {\r\n        clearInterval(timer);\r\n    }\r\n    for (var i = 0; i < squareSet.length; i++) {\r\n        for (var j = 0; j < squareSet[i].length; j++) {\r\n            if (squareSet[i][j] == null) {\r\n                continue;\r\n            }\r\n            squareSet[i][j].style.transform = "scale(0.95)";\r\n            squareSet[i][j].style.border = "0px solid white";\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction checkLinked(square, arr) {//检查相连的相同颜色的小方块，使用递归的方式\r\n    if (square == null) {\r\n        return;\r\n    }\r\n    arr.push(square);\r\n    //判断左侧\r\n    if (square.col > 0 && squareSet[square.row][square.col - 1] && squareSet[square.row][square.col - 1].num == square.num && arr.indexOf(squareSet[square.row][square.col - 1]) == -1) {\r\n        checkLinked(squareSet[square.row][square.col - 1], arr);\r\n    }\r\n    //判断右侧\r\n    if (square.col < boardWidth - 1 && squareSet[square.row][square.col + 1] && squareSet[square.row][square.col + 1].num == square.num && arr.indexOf(squareSet[square.row][square.col + 1]) == -1) {\r\n        checkLinked(squareSet[square.row][square.col + 1], arr);\r\n    }\r\n    //判断下方\r\n    if (square.row < boardWidth - 1 && squareSet[square.row + 1][square.col] && squareSet[square.row + 1][square.col].num == square.num && arr.indexOf(squareSet[square.row + 1][square.col]) == -1) {\r\n        checkLinked(squareSet[square.row + 1][square.col], arr);\r\n    }\r\n    //判断上方\r\n    if (square.row > 0 && squareSet[square.row - 1][square.col] && squareSet[square.row - 1][square.col].num == square.num && arr.indexOf(squareSet[square.row - 1][square.col]) == -1) {\r\n        checkLinked(squareSet[square.row - 1][square.col], arr);\r\n    }\r\n}\r\n\r\nfunction refresh() {//所有的小方块样式还原\r\n    for (var i = 0; i < squareSet.length; i++) {\r\n        for (var j = 0; j < squareSet[i].length; j++) {\r\n            if (squareSet[i][j] == null) {\r\n                continue;\r\n            }\r\n            squareSet[i][j].row = i;\r\n            squareSet[i][j].col = j;\r\n            squareSet[i][j].style.transition = "left 0.3s, bottom 0.3s";\r\n            squareSet[i][j].style.left = squareSet[i][j].col * squareWidth + "%";\r\n            squareSet[i][j].style.bottom = (squareSet[i][j].row * squareWidth) + "%";\r\n            squareSet[i][j].style.backgroundImage = "url(\'../img/" + squareSet[i][j].num + ".png\')";\r\n            squareSet[i][j].style.backgroundSize = "cover";\r\n            squareSet[i][j].style.transform = "scale(0.95)";\r\n\r\n        }\r\n    }\r\n}\r\n\r\nfunction createSquare(value, row, col) {//创建小方块\r\n    var temp = document.createElement("div");\r\n    temp.style.width = squareWidth + \'%\';\r\n    temp.style.height = squareWidth + \'%\';\r\n    temp.style.display = "inline-block";\r\n    temp.style.position = "absolute";\r\n    temp.style.boxSizing = "border-box";\r\n    temp.style.borderRadius = "1.2rem";\r\n    temp.style.opacity = 0;\r\n    temp.num = value;\r\n    temp.row = row;\r\n    temp.col = col;\r\n    return temp;\r\n}\r\n\r\nfunction selectScore() {//选中部分分数计算并显示\r\n    var score = 0;\r\n    for (var i = 0; i < choose.length; i++) {\r\n        score += baseScore + i * stepScore;\r\n    }\r\n    if (score == 0) {\r\n        return;\r\n    }\r\n    document.getElementById("selectScore").innerHTML = choose.length + "块 +" + score + "分";\r\n    document.getElementById("selectScore").style.transition = null;\r\n    document.getElementById("selectScore").style.opacity = 1;\r\n    setTimeout(function () {\r\n        document.getElementById("selectScore").style.transition = "opacity 1s";\r\n        document.getElementById("selectScore").style.opacity = 0;\r\n    }, 1000);\r\n}\r\n\r\nfunction mouseOver(obj) {//鼠标在小方块上方\r\n    if (!flag) {\r\n        tempSquare = obj;\r\n        return;\r\n    }\r\n    goBack();//所有样式还原\r\n    choose = [];\r\n    checkLinked(obj, choose);//检查相连的小方块\r\n    if (choose.length <= 1) {\r\n        choose = [];\r\n        return;\r\n    }\r\n    selectScore();//显示分数\r\n}\r\n\r\nfunction init() {\r\n    table = document.getElementById("stars");\r\n    document.getElementById("targetScore").getElementsByTagName(\'span\')[0].innerHTML = targetScore;\r\n    //初始化小方块\r\n    for (var i = 0; i < boardWidth; i++) {\r\n        squareSet[i] = new Array();\r\n        for (var j = 0; j < boardWidth; j++) {\r\n            var square = createSquare(Math.floor(Math.random() * level), i, j);\r\n            square.onmouseover = function () {\r\n                mouseOver(this);\r\n            };\r\n            square.onclick = function () {\r\n                if (!flag || choose.length == 0) {\r\n                    return;\r\n                }\r\n                flag = false;\r\n                tempSquare = null;\r\n                var score = 0;\r\n                for (var i = 0; i < choose.length; i++) {//加分数\r\n                    score += baseScore + i * stepScore;\r\n                }\r\n                //使用定时器\r\n                addScore(totalScore, score)\r\n                totalScore += score;\r\n\r\n                for (var i = 0; i < choose.length; i++) {//对每个选中的方块进行移除操作\r\n                    (function (i) {\r\n                        setTimeout(function () {\r\n                            squareSet[choose[i].row][choose[i].col] = null;\r\n                            table.removeChild(choose[i]);\r\n                        }, i * 100);\r\n                    })(i);\r\n                }\r\n                //改变背景\r\n                changBg(choose.length)\r\n                setTimeout(function () {\r\n                    move();\r\n                    if (choose.length >= 4) {\r\n                        animation_performance();\r\n                    }\r\n                    setTimeout(function () {\r\n                        var is = isFinish();\r\n                        if (is) {\r\n                            if (totalScore > targetScore) {\r\n                                // alert("恭喜");\r\n                                success();\r\n                            } else {\r\n                                // alert("游戏失败");\r\n                                fail();\r\n                            }\r\n                        } else {\r\n                            choose = [];\r\n                            flag = true;\r\n                            mouseOver(tempSquare);\r\n\r\n                        }\r\n                    }, 300 + choose.length * 150);\r\n                }, choose.length * 100);\r\n            }\r\n            squareSet[i][j] = square;\r\n            table.appendChild(square);\r\n        }\r\n    }\r\n    refresh();\r\n}\r\n//成功\r\nfunction success() {\r\n    var oDiv = document.getElementsByClassName(\'clearance\')[0]\r\n    oDiv.style.display = \'inline-block\'\r\n    setTimeout(() => {\r\n        alert(\'成功,进入下一关\')\r\n        location.href = \'./Game1-2.html\'        \r\n    }, 1000);\r\n}\r\n//失败\r\nfunction fail(){\r\n    var next = null;\r\n    setTimeout(() => {\r\n        next = alert(\'游戏失败\')        \r\n    }, 1000);\r\n    if(next){\r\n        location.reload();\r\n    }\r\n}\r\n\r\n//分数、动画\r\nfunction animation_score() {\r\n    for (var i = 0; i < squareSet.length; i++) {\r\n        for (var j = 0; j < squareSet[i].length; j++) {\r\n            var delay = Math.random()\r\n            squareSet[j][i].style.animation = \'star 1s linear \' + delay + \'s forwards\';\r\n        }\r\n    }\r\n}\r\n//消除多少个 - > 展示什么评价\r\nfunction animation_performance() {\r\n    var oDiv = document.getElementsByClassName(\'performance\')[0];\r\n    oDiv.style.animation = \'performance 1s linear backwards\';\r\n    setTimeout(() => {\r\n        oDiv.style.animation = \'\';\r\n        var img = document.getElementsByClassName(\'image\')[0]\r\n        img.src = \'\'\r\n    }, 1000);\r\n}\r\n\r\n//改变评价背景\r\nfunction changBg(len) {\r\n    if (len < 4) return\r\n\r\n    var img = document.getElementsByClassName(\'image\')[0];\r\n    if (len >= 4 && len < 6) {\r\n        img.src = \'../img/good.png\'\r\n    } else if (len == 6) {\r\n        img.src = \'../img/very_good.png\'\r\n    } else if (len > 6) {\r\n        img.src = \'../img/excelent.png\'\r\n    }\r\n\r\n}\r\n\r\n// 动态增加分数\r\nfunction addScore(nowScore, addScore) {\r\n    var limit = nowScore + addScore;\r\n    var timer = null;\r\n    timer = setInterval(() => {\r\n        nowScore += 3\r\n        if (nowScore > limit) {\r\n            nowScore = limit;\r\n            // console.log(\'清除定时器\')\r\n            clearInterval(timer)\r\n        }\r\n        document.getElementById("nowScore").getElementsByTagName(\'span\')[0].innerHTML = nowScore\r\n    }, 1);\r\n}\r\n\r\n\r\n\r\nwindow.onload = function () {\r\n    setTimeout(() => {\r\n        init();\r\n        animation_score();\r\n    }, 2000)\r\n    // animation();\r\n}\r\n\n\n//# sourceURL=webpack:///./src/js/Game1-1.js?')}});